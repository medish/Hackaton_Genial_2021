{"version":3,"file":"http-client-backend.service.d.ts","sources":["http-client-backend.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HttpBackend, HttpEvent, HttpHeaders, HttpRequest, HttpResponse, HttpXhrBackend, XhrFactory } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { InMemoryBackendConfigArgs, InMemoryDbService, ResponseOptions } from './interfaces';\r\nimport { BackendService } from './backend.service';\r\n/**\r\n * For Angular `HttpClient` simulate the behavior of a RESTy web api\r\n * backed by the simple in-memory data store provided by the injected `InMemoryDbService`.\r\n * Conforms mostly to behavior described here:\r\n * http://www.restapitutorial.com/lessons/httpmethods.html\r\n *\r\n * ### Usage\r\n *\r\n * Create an in-memory data store class that implements `InMemoryDbService`.\r\n * Call `config` static method with this service class and optional configuration object:\r\n * ```\r\n * // other imports\r\n * import { HttpClientModule } from '@angular/common/http';\r\n * import { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\r\n *\r\n * import { InMemHeroService, inMemConfig } from '../api/in-memory-hero.service';\r\n * @NgModule({\r\n *  imports: [\r\n *    HttpModule,\r\n *    HttpClientInMemoryWebApiModule.forRoot(InMemHeroService, inMemConfig),\r\n *    ...\r\n *  ],\r\n *  ...\r\n * })\r\n * export class AppModule { ... }\r\n * ```\r\n */\r\nexport declare class HttpClientBackendService extends BackendService implements HttpBackend {\r\n    private xhrFactory;\r\n    constructor(inMemDbService: InMemoryDbService, config: InMemoryBackendConfigArgs, xhrFactory: XhrFactory);\r\n    handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\r\n    protected getJsonBody(req: HttpRequest<any>): any;\r\n    protected getRequestMethod(req: HttpRequest<any>): string;\r\n    protected createHeaders(headers: {\r\n        [index: string]: string;\r\n    }): HttpHeaders;\r\n    protected createQueryMap(search: string): Map<string, string[]>;\r\n    protected createResponse$fromResponseOptions$(resOptions$: Observable<ResponseOptions>): Observable<HttpResponse<any>>;\r\n    protected createPassThruBackend(): HttpXhrBackend;\r\n}\r\n"]}